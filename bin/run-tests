#!/bin/bash
# runs vmtranslator over some test files
# it assumes tests are in the directory containing this script
# it assumes that the executable is in the parent directory

# set output and errors to buffering, disable error contexts
export CSTOOLS_IOBUFFER_OUTPUT=iob_buffer
export CSTOOLS_IOBUFFER_ERRORS=iob_buffer:iob_no_context
# kill off traces and logs
export CSTOOLS_IOBUFFER_TRACES=iob_disable
export CSTOOLS_IOBUFFER_LOGS=iob_disable

# nullglob is set so nothing runs if there are no test files
shopt -s nullglob

# generate output for a given input file using program
# leave empty output file if program has bad exit status or writes to standard error
# params: <force if output exists> <bash function to call> <input file> <output file>
# output should be in the TESTDIR
generate_output_file()
{
    force="${1}"
    program="${2}"
    input="${3}"
    output="${4}"
    testmessage="Generating \"${TESTDIR}${output}\" - "

    if [ "x${force}" == "x" -o \
            "x${program}" == "x" -o \
            "x${input}" == "x" -o \
            "x${output}" == "x" ] ;
    then
        echo "***** Error - generate_output_file: passed an empty parameter" ;
        exit -1 ;
    fi
    if [ ! -f "${input}" ] ; then
        echo "***** Error - generate_output_file: cannot find input file - ${input}" ;
        exit -1 ;
    fi

    # only attempt to produce the output file if forced or there is no output file
    if [ "x${force}" == "xall" -o ! -f "${output}" ] ; then
        ok="ok"
        rm -f "${output}.err"
        #if "${program}" < "${input}" > "${output}" 2> "${output}.err" ; then
        if "${program}" "${input}" "${output}" "${output}.err" ; then
            if [ -s "${output}.err" ] ; then
                ok="no"
            fi
        else
            ok="no"
        fi

        # if ok report so otherwise replace output file with an empty file
        if [ "${ok}" == "ok" ] ; then
                if [ "${loud}" != "quiet" ] ; then echo -e "${testmessage} ${colorboldgreen}ok${undocolor}" ; fi
        else
            if [ "${loud}" != "quiet" ] ; then echo -e "${testmessage} ${colorboldred}failed${undocolor}" ; fi
            rm -f "${output}"
            touch "${output}"
        fi
        rm -f "${output}.err"
    fi
}

# generate missing output files
# params: <bash function to call> <extension for input files> <extension for output files>
generate_output_files()
{
    force="${1}"
    program="${2}"
    ixtn="${3}"
    oxtn="${4}"

    if [ "x${force}" == "x" -o \
            "x${program}" == "x" -o \
            "x${ixtn}" == "x" -o \
            "x${oxtn}" == "x" ] ;
    then
        echo "***** error - generate_output_files: passed an empty parameter" ;
        exit -1 ;
    fi

	# generate an output file for every input file
	for i in *".${ixtn}" ; do
		input="${i}" output="${i%%.${ixtn}}.${oxtn}"

        generate_output_file "${force}" "${program}" "${input}" "${output}"
    done
}

# individual generator commands
# .Pxml
generate_Pxml()
{
    if [ "${#@}" -lt 3 ] ;
    then
        echo "***** Error - generate_Pxml(): passed too few parameters" ;
        exit -1 ;
    fi
    input="${1}"
    output="${2}"
    error="${3}"

    if [ ! -f "${input}" ] ; then
        echo "***** Error - generate_Pxml(): cannot find input file: ${input}" ;
        exit -1 ;
    fi
    ../bin/parser < "${input}" > "${output}" 2> "${error}"
}

# individual generator commands
# .sim
generate_sim()
{
    if [ "${#@}" -lt 3 ] ;
    then
        echo "***** Error - generate_sim(): passed too few parameters" ;
        exit -1 ;
    fi
    input="${1}"
    output="${2}"
    error="${3}"

    if [ ! -f "${input}" ] ; then
        echo "***** Error - generate_sim(): cannot find input file: ${input}" ;
        exit -1 ;
    fi
    cat "${input}" | ../bin/dummy-translator | ../bin/simulator fake-it >  "${output}" 2> "${error}"
}

### PRETTY STUFF ###

# if using an xterm - use headings and colour coded test results
if [ "${TERM:0:5}" == "xterm" -o "${TERM:0:2}" == "vt" ] ; then
	colorboldblack="\x1b[1;7;30m"
	colorboldgreen="\x1b[1;7;32m"
	colorboldred="\x1b[1;7;31m"
	undocolor="\x1b[0m"
else
	colorboldblack=
	colorboldgreen=
	colorboldred=
	undocolor=
fi

# make a string of whitespace matching the longest string parameter
padding=
setpadding()
{
	padding=
	while [ "${#@}" -gt 0 ] ; do
		while [ "${#padding}" -lt "${#1}" ] ; do
			padding="${padding} "
		done
		shift 1
	done
}

### DIRECTORY STUFF ###

# work out relative path to tests directory
THISPWD=`pwd`

# cd to the lib directory - where this script is
LIBDIR=`dirname $0`
cd "$LIBDIR"
LIBPWD=`pwd`

# find the parent directory name
PARENTDIR=`dirname "${LIBPWD}"`

# check we have a tests dir
if [ ! -d "../tests" ] ; then
	echo "Cannot find the tests directory"
	exit -1
fi

# cd to the tests dir
cd "../tests"
TESTPWD=`pwd`

# fix up pathnames to be displayed to the user
if [ "$THISPWD" == "$TESTPWD" ] ; then
	TESTDIR=""
	PARENTDIR="../"
elif [ "$THISPWD" == "$LIBPWD" ] ; then
	TESTDIR="../tests/"
	PARENTDIR="../"
elif [ "$THISPWD" == "$PARENTDIR" ] ; then
	TESTDIR="tests/"
	PARENTDIR="./"
else
	echo "Execute the following command first if you want to cut-paste the test commands:"
	echo "cd ${PARENTDIR}"
	echo
	TESTDIR="tests/"
	PARENTDIR="./"
fi

# display messages or hide them?
case $2 in
quiet)
	loud="quiet"
	;;
loud | *)
	loud="loud"
	;;
esac

# add all or missing .Pxml files or test the translator
case $1 in
add-tests)
	echo "Adding missing Pxml files."
    #generate_output_files missing bin/parser vm Pxml
    generate_output_files missing generate_Pxml vm Pxml
    generate_output_files missing generate_sim Pxml sim
    exit 0
	;;
renew-tests)
	echo "Regenerating all Pxml files."
    #generate_output_files all bin/parser vm Pxml
    generate_output_files all generate_Pxml vm Pxml
    generate_output_files all generate_sim Pxml sim
    exit 0
    ;;
working-translator)
    echo "Testing with a working translator"
    title1="Translator"
    command1="bin/dummy-translator"
    PARENTDIR_command1="${PARENTDIR}${command1}"
    title2="Simulator"
    command2="bin/simulator"
    command2_arg="fake-it"
    PARENTDIR_command2="${PARENTDIR}${command2} ${command2_arg}"
	;;
translator | *)
    echo "Testing student translator"
    title1="Translator"
    command1="translator"
    PARENTDIR_command1="${PARENTDIR}${command1}"
    title2="Simulator"
    command2="bin/simulator"
    command2_arg="test-it"
    PARENTDIR_command2="${PARENTDIR}${command2}"
    ;;
esac

# check we have command1
if [ ! -x "../${command1}" ] ; then
    echo Cannot find executable ${PARENTDIR}${command1}
    exit -1
fi

# check we have command2
if [ ! -x "../${command2}" ] ; then
    echo Cannot find executable ${PARENTDIR}${command2}
    exit -1
fi

# if we get here we are running student tests and want a pretty table too
inputs="Pxml"

# column1 - blank
setpadding "Checking"
pad_checking="${padding}"

# column2 - test input file
setpadding "cat ${TESTDIR}example.vm.Pxml"
pad_input="${padding}"

col_input="        Test Input"
col_input="${col_input}${pad_input:${#col_input}}"

# column3 - command1
col_command1="  ${title1}"
setpadding "${PARENTDIR_command1}"
pad_command1="${padding}"

col_command1="${col_command1}${pad_command1:${#col_command1}}"

# column4 - command2
col_command2="  ${title2}"
setpadding "${PARENTDIR_command2}"
pad_command2="${padding}"

col_command2="${col_command2}${pad_command2:${#col_command2}}"

# column5 - diff
col_diff="       Expected Test Output"
setpadding "${col_diff}"  "diff - ${TESTDIR}example.vm.Pxml.sim"
pad_diff="${padding}"
col_diff="${col_diff}${pad_diff:${#col_diff}}"


# column 7 - test result
setpadding " test passed " " test failed "
pad_result="${padding}"
col_result=" Test Result"
col_result="${col_result}${pad_result:${#col_result}}"

banner="NO"
header=
columns=
display_banner()
{
    if [ "${banner}" == "YES" ] ; then return ; fi

    banner="YES"
    if [ ${#header} -gt 0 ] ; then echo "${header}" ; fi
    if [ ${#columns} -gt 0 ] ; then echo -e "${columns}" ; fi
}


# test command1 | command2 and check exit status is 0
columns="${colorboldblack}${pad_checking}| ${col_input} | ${col_command1} | ${col_command2}   | ${col_diff} | ${col_result}${undocolor}"
for i in *.sim ; do
    if [ ! -s "${i}" ] ; then continue ; fi

    input="${i%%.sim}.Pxml"
    display_input="cat ${TESTDIR}${input}"
    display_input="${display_input}${pad_input:${#display_input}}"

    display_output="diff - ${TESTDIR}${i}"
    display_output="${display_output}${pad_diff:${#display_output}}"

    if [ -f "${input}" ] ; then
        testmessage="Checking \"${display_input} | ${PARENTDIR_command1} | ${PARENTDIR_command2} \" | ${display_output} - "
        if cat "${input}" | "../${command1}" 2>&1 | "../${command2}" "${command2_arg}" 2>&1 | diff - "${i}" > /dev/null 2> /dev/null ; then
            if [ "${loud}" != "quiet" ] ; then
                display_banner
                echo -e "${testmessage} ${colorboldgreen}test passed${undocolor}" ;
            fi
        else
            display_banner
            echo -e "${testmessage} ${colorboldred}test failed${undocolor}"
        fi
    fi
done
echo
