<vm-class>
    <vm-function>
        <command>function</command>
        <label>Ball.new</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>15</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Memory.alloc</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>10</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>6</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>11</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>12</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>5</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>6</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>13</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Ball.show</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.dispose</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Memory.deAlloc</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.show</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-function>
        <command>call</command>
        <label>Screen.setColor</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Ball.draw</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.hide</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Screen.setColor</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Ball.draw</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.draw</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>5</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>5</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-function>
        <command>call</command>
        <label>Screen.drawRectangle</label>
        <number>4</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.getLeft</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.getRight</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>5</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.setDestination</label>
        <number>3</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.abs</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.abs</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>7</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>7</offset>
    </vm-stack>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>8</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>9</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>8</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>9</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>5</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>6</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.move</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Ball.hide</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>5</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>6</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>9</offset>
    </vm-stack>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE1</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE1</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE1</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>7</offset>
    </vm-stack>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE2</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE2</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE2</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END2</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE2</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END2</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_END1</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE1</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>7</offset>
    </vm-stack>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE3</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE3</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE3</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END3</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE3</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END3</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_END1</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>8</offset>
    </vm-stack>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE4</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE4</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE4</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>7</offset>
    </vm-stack>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE5</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE5</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE5</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END5</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE5</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END5</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_END4</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE4</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>7</offset>
    </vm-stack>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE6</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE6</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE6</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END6</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE6</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END6</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_END4</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>10</offset>
    </vm-stack>
    <vm-operator>
        <command>gt</command>
    </vm-operator>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE7</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE7</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE7</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>10</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE7</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>11</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE8</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE8</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE8</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>11</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE8</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>12</offset>
    </vm-stack>
    <vm-operator>
        <command>gt</command>
    </vm-operator>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE9</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE9</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE9</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>12</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE9</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>13</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE10</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE10</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE10</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>13</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE10</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Ball.show</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Ball.bounce</label>
        <number>5</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>10</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.divide</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>10</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.divide</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>eq</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>10</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>eq</command>
    </vm-operator>
    <vm-operator>
        <command>and</command>
    </vm-operator>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>lt</command>
    </vm-operator>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>neg</command>
    </vm-operator>
    <vm-operator>
        <command>eq</command>
    </vm-operator>
    <vm-operator>
        <command>and</command>
    </vm-operator>
    <vm-operator>
        <command>or</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE1</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE1</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE1</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>20</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END1</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE1</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>5</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END1</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>eq</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE2</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE2</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE2</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>506</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>50</offset>
    </vm-stack>
    <vm-operator>
        <command>neg</command>
    </vm-operator>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.divide</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END2</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE2</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-operator>
        <command>eq</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE3</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE3</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE3</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>50</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.divide</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END3</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE3</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>14</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-operator>
        <command>eq</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE4</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE4</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE4</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>250</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>25</offset>
    </vm-stack>
    <vm-operator>
        <command>neg</command>
    </vm-operator>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.divide</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END4</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE4</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>25</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>3</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.divide</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>this</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>4</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END4</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_END3</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_END2</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>pointer</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Ball.setDestination</label>
        <number>3</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
</vm-class>
