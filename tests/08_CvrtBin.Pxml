<vm-class>
    <vm-function>
        <command>function</command>
        <label>Main.main</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>8001</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>16</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>neg</command>
    </vm-operator>
    <vm-function>
        <command>call</command>
        <label>Main.fillMemory</label>
        <number>3</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>8000</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Memory.peek</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Main.convert</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Main.convert</label>
        <number>3</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>WHILE_EXP0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>WHILE_END0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Main.nextMask</label>
        <number>1</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>9000</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Memory.poke</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>16</offset>
    </vm-stack>
    <vm-operator>
        <command>gt</command>
    </vm-operator>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>and</command>
    </vm-operator>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>eq</command>
    </vm-operator>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE1</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE1</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE1</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>8000</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Memory.poke</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>IF_END1</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE1</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>8000</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>local</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Memory.poke</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END1</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>pop</command>
        <segment>local</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-jump>
        <command>label</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>WHILE_EXP0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>WHILE_END0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-function>
        <command>function</command>
        <label>Main.nextMask</label>
        <number>0</number>
    </vm-function>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>eq</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-jump>
        <command>goto</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_TRUE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-jump>
        <command>goto</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>IF_FALSE0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Math.multiply</label>
        <number>2</number>
    </vm-function>
    <vm-operator>
        <command>return</command>
    </vm-operator>
    <vm-jump>
        <command>label</command>
        <label>IF_END0</label>
    </vm-jump>
    <vm-function>
        <command>function</command>
        <label>Main.fillMemory</label>
        <number>0</number>
    </vm-function>
    <vm-jump>
        <command>label</command>
        <label>WHILE_EXP0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>gt</command>
    </vm-operator>
    <vm-operator>
        <command>not</command>
    </vm-operator>
    <vm-jump>
        <command>if-goto</command>
        <label>WHILE_END0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>2</offset>
    </vm-stack>
    <vm-function>
        <command>call</command>
        <label>Memory.poke</label>
        <number>2</number>
    </vm-function>
    <vm-stack>
        <command>pop</command>
        <segment>temp</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>sub</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>argument</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>1</offset>
    </vm-stack>
    <vm-operator>
        <command>add</command>
    </vm-operator>
    <vm-stack>
        <command>pop</command>
        <segment>argument</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-jump>
        <command>goto</command>
        <label>WHILE_EXP0</label>
    </vm-jump>
    <vm-jump>
        <command>label</command>
        <label>WHILE_END0</label>
    </vm-jump>
    <vm-stack>
        <command>push</command>
        <segment>constant</segment>
        <offset>0</offset>
    </vm-stack>
    <vm-operator>
        <command>return</command>
    </vm-operator>
</vm-class>
